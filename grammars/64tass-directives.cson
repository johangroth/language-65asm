# Syntax Highlighting for the 64tass assembler directives

scopeName: 'source.64tass-directives'

patterns: [
  { include: '#comments' }  # comments
  { include: '#symbols' }   # symbols, constants, numbers
  { include: '#directives' } # 64tass assembler directives
]

# Repository starts here ------------------------------------------------------
repository:

  # comments
  comments:
    patterns: [
      # semicolon comments
      {
        match:  ';.*$'
        name:   'comment.line.semicolon.64tass-directives'
      }
    ]

  # symbols
  symbols:
    patterns: [
      # strings
      {
        begin: '"'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.64tass-directives'
        end: '"'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.64tass-directives'
        name: 'string.quoted.double.64tass-directives'
      }
      # absolut addressing/numbers
      {
        match: '\\#(\'.\'|[^\\s\']+)'
        name: 'constant.numeric.hex.64tass-directives'
      }
      # hex, prefixed with dollar sign($)
      {
        match: '-?\\$\\b[a-fA-F0-9]+\\b'
        name: 'constant.numeric.hex.64tass-directives'
      }
      # hex, suffixed with h(h)
      {
        match: '-?\\b([a-fA-F0-9]+)h\\b'
        name: 'constant.numeric.hex.64tass-directives'
      }
      # binary
      {
        match: '%[01]+'
        name: 'constant.numeric.binary.64tass-directives'
      }
      # decimal
      {
        match: '\\b([0-9]+)\\b'
        name: 'constant.numeric.decimal.64tass-directives'
      }
    ]

  # assembler directives
  directives:
    patterns: [
      # 64tass pseudo variables
      {
        match:  '(\\.)\\b(?i:\\*|asize|cpu|isize|paramcount|time|version)\\b'
        name:   'support.function.pseudo.64tass-directives'
      }
      # 64tass control commands, A through C
      {
        match:  '(\\.)\\b(?i:addr|al|align|as|assert|autsiz|bend|binary|bininclude|bfor|block|break|brept|byte|case|cdef|cerror|char|check|comment|continue|cpu|cwarn)\\b'
        name:   'support.function.pseudo.64tass-directives'
      }
      # 64tass control commands, D and E
      {
        match:  '(\\.)\\b(?i:databank|default|dint|dpage|dsection|dstruct|dunion|dword|edef|else|elsif|enc|end|endc|endf|endif|endm|endn|endp|ends|endswitch|endu|endv|endweak|eor|error)\\b'
        name:   'support.function.pseudo.64tass-directives'
      }
      # 64tass control commands, F through I
      {
        match:  '(\\.)\\b(?i:fi|fill|for|function|goto|here|hidemac|if|ifeq|ifmi|ifne|ifpl|include?)\\b'
        name:   'support.function.pseudo.64tass-directives'
      }
      # 64tass control commands, L through R
      {
        match:  '(\\.)\\b(?i:lbl|lint|logical|long|macro|mansiz|namespace|next|null|offs|option|page|pend|proc|proff|pron|ptext|rept|rta)\\b'
        name:   'support.function.pseudo.64tass-directives'
      }
      # 64tass control commands, S through Z
      {
        match:  '(\\.)\\b(?i:section|seed|segment|send|shift|shiftl|showmac|sint|struct|switch|text|union|var|virtual|warn|word)\\b'
        name:   'support.function.pseudo.64tass-directives'
      }
      # CPU constants
      {
        match:  '\\b(6502|65c02|65ce02|6502i|65816|65dtv02|65el02|r65c02|w65c02|4510|default)\\b'
        name:   'constant.language.64tass-directives'
      }
      # Built-in functions
      {
        match:  '\\b(?i:abs|acos|all|any|asin|atan|atan2|binary|cbrt|ceil|cos|cosh|deg|exp|floor|format|frac|hypot|len|log|log10|pow|rad|random|range|repr|round|sign|sin|sinh|size|sort|sqrt|tan|tanh|trunc)\\b'
        name:   'constant.language.64tass-directives'
      }
      # Operators
      {
        match:  '!|&|&&|\\^|\\*|\\/|\\-|\\+|~|=|<=|>=|<<|>>|<>|<|>|\\||\\|\\|'
        name:   'keyword.operator.64tass-directives'
      }
      # Operators II
      {
        match:  '(\\.)\\b(?i:and|(bit)?(and|not|or|xor)|mod|shl|shr)\\b'
        name:   'keyword.operator.64tass-directives'
      }
    ]
